%------------------------------------------------------------------------------
% A Prolog Implementation of the Wumpus World described in
% Artificial Intelligence : A Modern Approach (Russel - Norvig)
%
% Mandatory Excercise 2007
% v1.0 - Jan. 31, 2007
% Richard O. Legendi
%
% Copied into prolog-examples with permission Richard O. Legendi
% Original exercise descriped in  Artificial Intelligence : A Modern Approach (Russel - Norvig)
%
% Usage:
% consult this file
% ?-start.
%
%------------------------------------------------------------------------------


%------------------------------------------------------------------------------
% Declaring dynamic methods

:- dynamic ([
	     agent_location/1,
	     gold_location/1,
         diamond_location/1,   
	     pit_location/1,
	     time_taken/1,
	     score/1,
	     visited/1,
	     visited_cells/1,
	     world_size/1,
	     wumpus_location/1,
         arrow_location/1,
         arrow/1,
             isPit/2,
             isWumpus/2,
             isGold/2,
             isDiamond/2
	    ]).


%------------------------------------------------------------------------------
% To start the game

start :-
    format('Initializing started...~n', []),
    init,
    format('Let the game begin!~n', []),
    take_steps([[1,1]]).

%------------------------------------------------------------------------------
% Scheduling simulation:

step_pre(VisitedList,[Action]) :-
    agent_location(AL),
    gold_location(GL),
    wumpus_location(WL),
    diamond_location(DL),
    arrow_location(ArrowL),
    score(S),
    time_taken(T),

    ( AL=GL, AL=DL -> 
    			format('AGENT FOUND THE DIAMOND!! ~n', [])
    			, writeln('FIND DIAMOND and get 500 score points')
    			, format('I\'m going to: ~p~n', [Action])
    		   	, writeln('WON!'), format('Score: ~p,~nTime: ~p ~n', [S,T])
    			%, take_steps(VisitedList)
    
    ; AL=GL -> format('I\'m going to: ~p~n', [Action])
    		   , format('AGENT FOUND THE GOLD!! ~n', [])
    		   , writeln('WON!'), format('Score: ~p,~nTime: ~p ~n', [S,T])
    		   %, take_steps(VisitedList)
    
    ; ArrowL=WL -> 
    			kill_wumpus(ArrowL)
    			, writeln('Agent take 250 points for this shoot!')
        		, format('Score: ~p,~nTime: ~p ~n', [S,T])
    			, format('I\'m going to: ~p~n', [Action])
    			, take_steps(VisitedList)
    
    ; AL=WL -> format('I\'m going to: ~p~n', [Action]),
    		   format('Lost: Wumpus eats you!~n', []),
               format('Score: ~p,~nTime: ~p ~n', [S,T])
    
    ; is_pit(yes,AL) -> format('Lost: Fallen in pit!~n', []),
               format('Score: ~p,~nTime: ~p ~n', [S,T])
    
    ; AL=DL -> 
    			format('I\'m going to: ~p~n', [Action])
    			, format('AGENT FOUND THE DIAMOND!! ~n', [])
    			, writeln('FIND DIAMOND and get 500 score points')
    			, format('Score: ~p,~nTime: ~p ~n', [S,T])	
    			, take_steps(VisitedList)
    
    
    ; 	format('I\'m going to: ~p~n', [Action])
    	,take_steps(VisitedList)
    ).

take_steps(VisitedList) :-
    make_percept_sentence(Perception),
    agent_location(AL),
    format('I\'m in ~p, seeing: ~p~n', [AL,Perception]),
    
    update_KB(Perception),
    wumpus_location_KB(VisitedList),
    ask_KB(VisitedList, Action),

    update_time,
    update_score,

    agent_location(Aloc),
    VL = [Aloc|VisitedList],
    standing,
    step_pre(VL,[Action]).

%------------------------------------------------------------------------------
% Updating states

update_time :-
    time_taken(T),
    NewTime is T+1,
    retractall( time_taken(_) ),
    assert( time_taken(NewTime) ).

update_score :-
    agent_location(AL),
    gold_location(GL),
    wumpus_location(WL),
    diamond_location(DL),
    pit_location(PL),
    arrow_location(ArrowL),
    update_score(AL, GL, WL, DL, PL,ArrowL).

update_score(P) :-
    score(S),
    NewScore is S+P,
    retractall( score(_) ),
    assert( score(NewScore) ).

update_score(AL, AL, _,_,_,_) :-
    update_score(1000).

update_score(AL,_,_,AL,_,_) :-
    update_score(500).

update_score(_,_,ArrowL,_,_,ArrowL) :-
    update_score(250).

update_score(_,_,_,_,_,_) :-
    update_score(-1).
    

update_agent_location(NewAL) :-
    retractall( agent_location(_) ),
    assert( agent_location(NewAL) ).

is_pit(no,  X) :-
    \+ pit_location(X).
is_pit(yes, X) :-
    pit_location(X).

%------------------------------------------------------------------------------
% Display standings

standing :-
    wumpus_location(WL),
    gold_location(GL),
    agent_location(AL),
    diamond_location(DL),
    arrow_location(ArrowL),

    ( is_pit(yes, AL) -> format('Agent was fallen into a pit!~n', []),
      true
    ; stnd(AL, GL, WL,DL, ArrowL)
      %\+ pit_location(yes, Al),
    ).
stnd(_, _, ArrowL, _ ,ArrowL) :-
    writeln('You successful kill the Wumpus!'),
    true.

stnd(AL, _, AL, _ ,_) :-
    format('YIKES! You\'re eaten by the wumpus! ~n', []),
    true.

stnd(AL, _, _, AL,_) :-
    
    true.
    
stnd(AL, AL, _, _,_) :-
    
    true.

stnd(_, _, _, _,_) :-
    format('There\'s still something to do...~n', []).
%------------------------------------------------------------------------------
% Perceptotion

make_perception([_Stench,_Bleeze,_Shine,_Glitter]) :-
    agent_location(AL),
    isSmelly(AL),
    isBleezy(AL),
   	isShine(AL),
    isGlittering(AL).

test_perception :-
	make_percept_sentence(Percept),
	format('I feel ~p, ',[Percept]).

make_percept_sentence([Stench,Bleeze,Shine,Glitter]) :-
	smelly(Stench),
	bleezy(Bleeze),
    shine(Shine),
	glittering(Glitter).

%------------------------------------------------------------------------------
% Initializing

init :-
    init_game,
    init_land_fig72,
    init_agent,
    init_wumpus.

init_game :-
    retractall( time_taken(_) ),
    assert( time_taken(0) ),

    retractall( score(_) ),
    assert( score(0) ),

    retractall( visited(_) ),
    assert( visited(1) ),

    retractall( isWumpus(_,_) ),
    retractall( isPit(_,_) ),
    retractall( isGold(_,_) ),
    retractall( isDiamond(_,_) ),

    retractall( visited_cells(_) ),
    assert( visited_cells([]) ).

% To set the situation described in Russel-Norvig's book (2nd Ed.),
% according to Figure 7.2
init_land_fig72 :-
    retractall( world_size(_) ),
    assert( world_size(5) ),

    retractall( gold_location(_) ),
    assert( gold_location([3,2]) ),
    
    retractall(diamond_location(_) ),
   	assert( diamond_location([2,2]) ),
    
    retractall(arrow(_)),
    assert(arrow(1)),
    
    retractall( arrow_location(_)),
    assert(arrow_location([0,0]) ),

    retractall( pit_location(_) ),
    assert( pit_location([4,4]) ),
    assert(pit_location([3,3]) ),
    assert( pit_location([1,3]) ).

init_agent :-
    retractall( agent_location(_) ),
    assert( agent_location([1,1]) ),
    
    visit([1,1]).

init_wumpus :-
    
    retractall( wumpus_location(_) ),
    assert( wumpus_location([4,1])).

visit(Xs) :-
    visited_cells(Ys),
    retractall( visited_cells(_) ),
    assert( visited_cells([Ys|Xs]) ).

%------------------------------------------------------------------------------
% Perceptors

%%% Institiation error!!!

%adj(X,Y) :-
%    world_size(WS),
%    ( X is Y+1, Y   < WS
%    ; X is Y-1, Y-1 > 0
%    ).

adj(1,2).
adj(2,1).
adj(2,3).
adj(3,2).
adj(3,4).
adj(4,3).
adj(4,5).
adj(5,4).

adjacent( [X1, Y1], [X2, Y2] ) :-
    ( X1 = X2, adj( Y1, Y2 )
    ; Y1 = Y2, adj( X1, X2 )
    ).

%adjacent([X1,Y],[X2,Y]) :-
%    adj(X1,X2).

%adjacent([X,Y1],[X,Y2]) :-
%    adj(Y1,Y2).

isSmelly(Ls1) :-
    wumpus_location( Ls2 ),
    adjacent( Ls1, Ls2 ).

isBleezy(Ls1) :-
    pit_location( Ls2 ),
    adjacent( Ls1, Ls2 ).

isShine(Ls1) :-
    diamond_location(Ls2),
    adjacent( Ls1, Ls2 ).

isGlittering(Ls1) :-
    gold_location(Ls2),
    adjacent( Ls1, Ls2 ).

bleezy(yes) :-
    agent_location(AL),
    isBleezy(AL).
bleezy(no).

smelly(yes) :-
    agent_location(AL),
    isSmelly(AL).
smelly(no).

shine(yes) :-
    agent_location(AL),
    isShine(AL).
shine(no).

glittering(yes) :-
    agent_location(AL),
    isGlittering(AL).
glittering(no).

%------------------------------------------------------------------------------
% Knowledge Base:

update_KB( [Stench,Bleeze,Shine,Glitter] ) :-
    add_wumpus_KB(Stench),
    add_pit_KB(Bleeze),
    add_diamond_KB(Shine),
    add_gold_KB(Glitter).


% if it would be 'yes' -> it would mean the player is eaten ;]
add_wumpus_KB(no) :-
    agent_location([X,Y]),
    Z1 is Y+1,
    Z2 is Y-1, 
    Z3 is X+1, 
    Z4 is X-1,
    (   
    	(permitted([X,Z1]), assume_wumpus(no,[X,Z1]));
    	Z1 is Y+1
    ),
    (   
    	(permitted([X,Z2]), assume_wumpus(no,[X,Z2]));
    	Z2 is Y-1
    ),
    (   
    	(permitted([Z3,Y]), assume_wumpus(no,[Z3,Y]));
    	Z3 is X+1
    ),
    (   
    	(permitted([Z4,Y]), assume_wumpus(no,[Z4,Y]));
    	Z4 is X-1
    ).

add_wumpus_KB(yes) :-
    agent_location([X,Y]),
    Z1 is Y+1,
    Z2 is Y-1, 
    Z3 is X+1, 
    Z4 is X-1,
    (   
    	(permitted([X,Z1]), assume_wumpus(yes,[X,Z1]));
    	Z1 is Y+1
    ),
    (   
    	(permitted([X,Z2]), assume_wumpus(yes,[X,Z2]));
    	Z2 is Y-1
    ),
    (   
    	(permitted([Z3,Y]), assume_wumpus(yes,[Z3,Y]));
    	Z3 is X+1
    ),
    (   
    	(permitted([Z4,Y]), assume_wumpus(yes,[Z4,Y]));
    	Z4 is X-1
    ).

add_pit_KB(no) :-
    agent_location([X,Y]),
    Z1 is Y+1,
    Z2 is Y-1, 
    Z3 is X+1, 
    Z4 is X-1,
    (   
    	(permitted([X,Z1]), assume_pit(no,[X,Z1]));
    	Z1 is Y+1
    ),
    (   
    	(permitted([X,Z2]), assume_pit(no,[X,Z2]));
    	Z2 is Y-1
    ),
    (   
    	(permitted([Z3,Y]), assume_pit(no,[Z3,Y]));
    	Z3 is X+1
    ),
    (   
    	(permitted([Z4,Y]), assume_pit(no,[Z4,Y]));
    	Z4 is X-1
    ).

% Checking needed!! If its not already in the KB !!!
add_pit_KB(yes) :-
    agent_location([X,Y]),
    Z1 is Y+1,
    Z2 is Y-1, 
    Z3 is X+1, 
    Z4 is X-1,
    (   
    	(permitted([X,Z1]), assume_pit(yes,[X,Z1]));
    	Z1 is Y+1
    ),
    (   
    	(permitted([X,Z2]), assume_pit(yes,[X,Z2]));
    	Z2 is Y-1
    ),
    (   
    	(permitted([Z3,Y]), assume_pit(yes,[Z3,Y]));
    	Z3 is X+1
    ),
    (   
    	(permitted([Z4,Y]), assume_pit(yes,[Z4,Y]));
    	Z4 is X-1
    ).
    

add_diamond_KB(no) :-
    agent_location([X,Y]),
    Z1 is Y+1,
    Z2 is Y-1, 
    Z3 is X+1, 
    Z4 is X-1,
    (   
    	(permitted([X,Z1]), assume_diamond(no,[X,Z1]));
    	Z1 is Y+1
    ),
    (   
    	(permitted([X,Z2]), assume_diamond(no,[X,Z2]));
    	Z2 is Y-1
    ),
    (   
    	(permitted([Z3,Y]), assume_diamond(no,[Z3,Y]));
    	Z3 is X+1
    ),
    (   
    	(permitted([Z4,Y]), assume_diamond(no,[Z4,Y]));
    	Z4 is X-1
    ).

% Checking needed!! If its not already in the KB !!!
add_diamond_KB(yes) :-
    agent_location([X,Y]),
    Z1 is Y+1,
    Z2 is Y-1, 
    Z3 is X+1, 
    Z4 is X-1,
    (   
    	(permitted([X,Z1]), assume_diamond(yes,[X,Z1]));
    	Z1 is Y+1
    ),
    (   
    	(permitted([X,Z2]), assume_diamond(yes,[X,Z2]));
    	Z2 is Y-1
    ),
    (   
    	(permitted([Z3,Y]), assume_diamond(yes,[Z3,Y]));
    	Z3 is X+1
    ),
    (   
    	(permitted([Z4,Y]), assume_diamond(yes,[Z4,Y]));
    	Z4 is X-1
    ).
    
    

add_gold_KB(no) :-
    agent_location([X,Y]),
    Z1 is Y+1,
    Z2 is Y-1, 
    Z3 is X+1, 
    Z4 is X-1,
    (   
    	(permitted([X,Z1]), assume_gold(no,[X,Z1]));
    	Z1 is Y+1
    ),
    (   
    	(permitted([X,Z2]), assume_gold(no,[X,Z2]));
    	Z2 is Y-1
    ),
    (   
    	(permitted([Z3,Y]), assume_gold(no,[Z3,Y]));
    	Z3 is X+1
    ),
    (   
    	(permitted([Z4,Y]), assume_gold(no,[Z4,Y]));
    	Z4 is X-1
    ).


add_gold_KB(yes) :-
    agent_location([X,Y]),
    Z1 is Y+1,
    Z2 is Y-1, 
    Z3 is X+1, 
    Z4 is X-1,
    (   
    	(permitted([X,Z1]), assume_gold(yes,[X,Z1]));
    	Z1 is Y+1
    ),
    (   
    	(permitted([X,Z2]), assume_gold(yes,[X,Z2]));
    	Z2 is Y-1
    ),
    (   
    	(permitted([Z3,Y]), assume_gold(yes,[Z3,Y]));
    	Z3 is X+1
    ),
    (   
    	(permitted([Z4,Y]), assume_gold(yes,[Z4,Y]));
    	Z4 is X-1
    ).

assume_wumpus(no, L) :-
    retractall( isWumpus(_, L) ),
    assert( isWumpus(no, L) ),
    format('KB learn ~p - no Wumpus there!~n', [L]).

assume_wumpus(yes, L) :-
    retractall( isWumpus(_, L) ),
    assert( isWumpus(yes, L) ),
    format('KB learn ~p - possibly the Wumpus is there!~n', [L]).

assume_pit(no, L) :-
    retractall( isPit(_, L) ),
    assert( isPit(no, L) ),
    format('KB learn ~p - there\'s no Pit there!~n', [L]).

assume_pit(yes, L) :-
    retractall( isPit(_, L) ),
    assert( isPit(yes, L) ),
    format('KB learn ~p - its a Pit!~n', [L]).

assume_diamond(no, L) :-
    retractall( isDiamond(_, L) ),
    assert( isDiamond(no, L) ),
    format('KB learn ~p - there\'s no diamond here!~n', [L]).

assume_diamond(yes, L) :-
    retractall( isDiamond(_, L) ),
    assert( isDiamond(yes, L) ),
    format('KB learn ~p - Diamond maybe is here!!!~n', [L]).

assume_gold(no, L) :-
    retractall( isGold(_, L) ),
    assert( isGold(no, L) ),
    format('KB learn ~p - there\'s no gold here!~n', [L]).

assume_gold(yes, L) :-
    retractall( isGold(_, L) ),
    assert( isGold(yes, L) ),
    format('KB learn ~p - Gold maybe is here!!!~n', [L]).



assume_arrow(yes) :-
    arrow_location(ArrowL),
    arrow(Arrow),
    Arrow > 0, !,
    Arrow1 is Arrow-1,
    retract(arrow(Arrow)),
    assert(arrow(Arrow1)),
    format('Agent shoots to ~p !~n', [ArrowL]),
    format('You now have ~p arrow(s).~n',Arrow1).

assume_arrow(no) .

kill_wumpus([X,Y]) :-
    wumpus_location([X1,Y1]),
    X=X1,
    Y=Y1,
    retractall(wumpus_location(_) ),
    asserta(wumpus_location([-5,-5]) ).
    

permitted([X,Y]) :-
    (   
      world_size(WS),
      0 < X, X < WS+1,
      0 < Y, Y < WS+1
    ); fail.

ask_KB(VisitedList, Action) :-
    agent_location([X,Y]),
    check_for_gold_right([X,Y], VisitedList),
    C is Y+1,
    update_agent_location([X,C]),
    Action = [X,C].

ask_KB(VisitedList, Action) :-
    agent_location([X,Y]),
    check_for_gold_top([X,Y], VisitedList),
    Z is X+1, 
    C is Y,
    update_agent_location([Z,C]),
    Action = [Z,C].

ask_KB(VisitedList, Action) :-
    agent_location([X,Y]),
    check_for_gold_left([X,Y], VisitedList),
    Z is X, 
    C is Y-1,
    update_agent_location([Z,C]),
    Action = [Z,C].

ask_KB(VisitedList, Action) :-
    agent_location([X,Y]),
    check_for_gold_down([X,Y], VisitedList),
    Z is X-1, 
    C is Y,
    update_agent_location([Z,C]),
    Action = [Z,C].

ask_KB(VisitedList, Action) :-
    agent_location([X,Y]),
    C is Y+1,
    permitted([X,C]),
    direction_rigth([X,C], VisitedList),
    not_member([X,C], VisitedList),
    update_agent_location([X,C]),
    Action = [X,C].

ask_KB(VisitedList, Action) :-
    agent_location([X,Y]),
    Z is X+1, 
    C is Y - 1,
    permitted([Z,C]),
    was_here([Z,C], VisitedList),
    direction_top([Z,C], VisitedList),
    not_member([Z,C], VisitedList),
    update_agent_location([Z,C]),
    Action = [Z,C].

ask_KB(VisitedList, Action) :-
    smelly(yes) -> fail;
    bleezy(yes) ->   fail;
    agent_location([X,Y]),
    Z is X+1, 
    C is Y,
    permitted([Z,C]),
    was_here([Z,C], VisitedList),
    direction_top([Z,C], VisitedList),
    not_member([Z,C], VisitedList),
    update_agent_location([Z,C]),
    Action = [Z,C].

ask_KB(VisitedList, Action) :-
    agent_location([X,Y]),
    Z is X-1, 
    C is Y-1,
    permitted([Z,C]),
    direction_left([Z,C], VisitedList),
    not_member([Z,C], VisitedList),
    update_agent_location([Z,C]),
    Action = [Z,C].

ask_KB(VisitedList, Action) :-
    agent_location([X,Y]),
    Z is X - 1, 
    C is Y - 1,
    permitted([Z,C]),
    was_here([Z,C], VisitedList),
    direction_down([Z,C], VisitedList),
    not_member([Z,C], VisitedList),
    update_agent_location([Z,C]),
    Action = [Z,C].

ask_KB(VisitedList, Action) :-
    (   
      ( Z is 0, C is 1, come_back([Z,C], VisitedList, [X,Y]),
          direction_rigth([X,Y], VisitedList));
      ( Z is 1, C is 0, come_back([Z,C], VisitedList, [X,Y]),
          direction_top([X,Y], VisitedList));
      ( Z is 0, C is -1, come_back([Z,C], VisitedList, [X,Y]),
          direction_left([X,Y], VisitedList));
      ( Z is -1, C is 0, come_back([Z,C], VisitedList, [X,Y]),
          direction_down([X,Y], VisitedList))
    ),
    permitted([X,Y]),
    not_member([X,Y], VisitedList),
    update_agent_location([X,Y]),
    Action = [X,Y].

check_for_gold_right([X,Y], VisitedList) :-
    	X1 is X+1,
        X2 is X-1,
        Y1 is Y+1,
        Y3 is Y+2,
    	(
          (
          	visit_place([X2,Y1], VisitedList), 
          	isGlittering([X2,Y1])
          );
          (
        	visit_place([X1,Y1], VisitedList),
          	isGlittering([X1,Y1])
          );
          (
          	visit_place([X,Y3], VisitedList),
          	isGlittering([X,Y3])
          )
        ),
    	 not_member([X,Y1], VisitedList).

check_for_gold_top([X,Y], VisitedList) :-
    	X1 is X+1,
        X3 is X+2,
        Y1 is Y+1,
        Y2 is Y-1,
        (
          (
              visit_place([X1,Y1], VisitedList),
              isGlittering([X1,Y1])
          );
          (
              visit_place([X1,Y2], VisitedList),
              isGlittering([X1,Y2])
          );
          (
              visit_place([X3,Y], VisitedList),
              isGlittering([X3,Y])
          )
        ),
    	 not_member([X1,Y], VisitedList).

check_for_gold_left([X,Y], VisitedList) :-
    	X1 is X+1,
        X2 is X-1,
        Y2 is Y-1,
        Y4 is Y-2,
   		(   
          (
              visit_place([X1,Y2], VisitedList),
              isGlittering([X1,Y2])
          );
          (
              visit_place([X2,Y2], VisitedList),
              isGlittering([X2,Y2])
          );
          (
              visit_place([X,Y4], VisitedList), 
              isGlittering([X,Y4])
          )
    	),
    	 not_member([X,Y2], VisitedList).

check_for_gold_down([X,Y], VisitedList) :-
        X2 is X-1,
        X4 is X-2,
        Y1 is Y+1,
        Y2 is Y-1,
    	(
          (
          	visit_place([X2,Y2], VisitedList), 
          	isGlittering([X2,Y2])
          );
          (
        	visit_place([X2,Y1], VisitedList),
          	isGlittering([X2,Y1])
          );
          (
          	visit_place([X4,Y], VisitedList), 
          	isGlittering([X4,Y])
          )
        ),
    	 not_member([X2,Y], VisitedList).

wumpus_location_KB(VisitedList) :-
    smelly(yes),
    agent_location(AL),
    check_for_wumpus(AL, VisitedList),
    assume_arrow(yes).

wumpus_location_KB(_) .

check_for_wumpus([X,Y], VisitedList) :-
    	X1 is X+1,
        X3 is X+2,
        Y1 is Y+1,
        Y2 is Y-1,
        (
          (
              visit_place([X1,Y1], VisitedList),
              isSmelly([X1,Y1])
          );
          (
              visit_place([X1,Y2], VisitedList),
              isSmelly([X1,Y2])
          );
          (
              visit_place([X3,Y], VisitedList),
              isSmelly([X3,Y])
          )
        ),
    	 not_member([X1,Y], VisitedList),
		 asserta(arrow_location([X1,Y])).

check_for_wumpus([X,Y], VisitedList) :-
    	X1 is X+1,
        X2 is X-1,
        Y2 is Y-1,
        Y4 is Y-2,
   		(   
          (
              visit_place([X1,Y2], VisitedList),
              isSmelly([X1,Y2])
          );
          (
              visit_place([X2,Y2], VisitedList),
              isSmelly([X2,Y2])
          );
          (
              visit_place([X,Y4], VisitedList), 
              isSmelly([X,Y4])
          )
    	),
    	 not_member([X,Y2], VisitedList),
		 asserta(arrow_location([X,Y2])).

check_for_wumpus([X,Y], VisitedList) :-
        X2 is X-1,
        X4 is X-2,
        Y1 is Y+1,
        Y2 is Y-1,
    	(
          (
          	visit_place([X2,Y2], VisitedList), 
          	isSmelly([X2,Y2])
          );
          (
        	visit_place([X2,Y1], VisitedList),
          	isSmelly([X2,Y1])
          );
          (
          	visit_place([X4,Y], VisitedList), 
          	isSmelly([X4,Y])
          )
        ),
    	 not_member([X2,Y], VisitedList),
		 asserta(arrow_location([X2,Y])).

check_for_wumpus([X,Y], VisitedList) :-
    	X1 is X+1,
        X2 is X-1,
        Y1 is Y+1,
        Y3 is Y+2,
    	(
          (
          	visit_place([X2,Y1], VisitedList), 
          	isSmelly([X2,Y1])
          );
          (
        	visit_place([X1,Y1], VisitedList),
          	isSmelly([X1,Y1])
          );
          (
          	visit_place([X,Y3], VisitedList),
          	isSmelly([X,Y3])
          )
        ),
    	 not_member([X,Y1], VisitedList),
		 asserta(arrow_location([X,Y1])).

%------------------------------------------------------------------------------
% Utils

was_here(_,[]) :- fail.
was_here([X,Y], [[U,V]|Ys]) :-
    (   
    	Z is X - 1,
        C is Y,
        Z=U,C=V ->   true
    );
    (   
    	Z is X,
        C is Y+1,
        Z=U,C=V ->   true
	);
    (   
    	Z is X+1,
        C is Y,
        Z=U,C=V ->   true
    );
    (   
    	Z is X,
        C is Y-1,
        Z=U,C=V ->   true
    ); was_here([X,Y], Ys).

come_back(_,[],_) :- fail.
come_back([X,Y],[[U,V]|Ys],[X1,Y1]) :-
     (
     	(
		  	isSmelly([U,V]);
        	isBleezy([U,V])
        ), come_back([X,Y], Ys, [X1,Y1]);
        (   
          Z is U+X,
          C is V+Y,
          check_come_back([Z,C], Ys),
          X1 is Z,
          Y1 is C
        );
     	come_back([X,Y], Ys, [X1,Y1])
      ).
    
check_come_back(_,[]) :- true.
check_come_back([Z,C], [[P,N]|Ys]) :-
    (
    	(   
        	Z=P, C=N ->  fail
        );
    	(   
        	isSmelly([Z,C]);
            isBleezy([Z,C])
        ) -> fail;
    	check_come_back([Z,C], Ys)
    ).
    
direction_rigth(_,[]) .
direction_rigth([X,Y], [[U,V]|Ys]) :-
    ( 
       (   
         smelly(yes);
         bleezy(yes),
        (   
          isSmelly([U,V]);
          isBleezy([U,V])
      	 ) 
    	) ->   fail;
        direction_rigth([X,Y], Ys)
    ).

direction_top(_,[]).
direction_top([X,Y], [[U,V]|Ys]) :-
    ( 
       (   
       	 agent_location([X1,Y1]),
           X1=U, Y1=V, direction_top([X,Y],Ys)
       );
       (   
         smelly(yes);
         bleezy(yes),
        (   
          isSmelly([U,V]);
          isBleezy([U,V])
      	 ) 
    	) ->   direction_top([X,Y], Ys);
        true
    ).

direction_left(_,[]).
direction_left([X,Y], [[U,V]|Ys]) :-
    ( 
       (   
       	 agent_location([X1,Y1]),
           X1=U, Y1=V, direction_left([X,Y],Ys)
       );
       (   
         smelly(yes);
         bleezy(yes),
        (   
          isSmelly([U,V]);
          isBleezy([U,V])
      	 ) 
    	) ->   direction_left([X,Y], Ys);
        true
    ).

direction_down(_,[]).
direction_down([X,Y], [[U,V]|Ys]) :-
    ( 
       (   
       	 agent_location([X1,Y1]),
           X1=U, Y1=V, direction_down([X,Y],Ys)
       );
       (   
         smelly(yes);
         bleezy(yes),
        (   
          isSmelly([U,V]);
          isBleezy([U,V])
      	 ) 
    	) ->   direction_down([X,Y], Ys);
        true
    ).

not_member(_, []).
not_member([X,Y], [[U,V]|Ys]) :-
    ( X=U,Y=V -> fail
    ; not_member([X,Y], Ys)
    ).

visit_place(_, []) :-
    fail.
visit_place([X,Y], [[U,V]|Ys]) :-
    ( X=U,Y=V -> true
    ; visit_place([X,Y], Ys)
    ).